"""
Django settings for dj_store project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# py
from pathlib import Path
# django
# third
from decouple import config
# own

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Application definition

BASE_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_APPS = [
    'import_export',
    'django_extensions',
    'ckeditor',
]

# Django CKEditor
# https://django-ckeditor.readthedocs.io/en/latest/

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
    },
}

OWN_APPS = [
    'apps.base',
    'apps.user',
    'apps.services',
    'apps.blog',
    'apps.contact',
    'apps.store',
    'apps.cart',
]

INSTALLED_APPS = BASE_APPS + THIRD_APPS + OWN_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dj_store.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.cart.context_processors.sum_total_cart',
            ],
        },
    },
]

WSGI_APPLICATION = 'dj_store.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# user custom.
AUTH_USER_MODEL = 'user.Users'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC' # hora interna del system.
TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']

# Media (imgs, files, etc).
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# logs

# DEBUG: Mensajes detallados, generalmente útiles para la depuración.

# INFO: Mensajes informativos sobre el funcionamiento normal de la aplicación.

# WARNING: Mensajes que indican situaciones inusuales pero no críticas.

# ERROR: Mensajes que indican errores que afectan a la funcionalidad.

# CRITICAL: Errores graves que probablemente causen la falla de la aplicación.

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} | {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },

    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'DEBUG', # Captura todos los niveles de log, incluyendo DEBUG
        },
        'file_contact_views': {
            'level': 'DEBUG', # Captura todos los niveles de log, incluyendo DEBUG
            'class': 'logging.FileHandler',
            # Usamos str() para convertir la ruta de Path a una cadena
            'filename': str(BASE_DIR / 'logs' / 'contact.log'),
            'formatter': 'verbose',
        },
    },

    'loggers': {
        # Logger para el contact views.
        'apps.contact.views': {
            'handlers': ['console', 'file_contact_views'],
            'level': 'DEBUG', # Captura todos los niveles de log para este logger
            'propagate': False, # evita que el log se propague a loggers de nivel superior (evita mensajes duplicados).
        },
    }
}